{"ast":null,"code":"// Validation utilities for the onboarding form\n// TODO: Add more validation rules later\n\nexport const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\nexport const validateZipCode = zip => {\n  // Must be exactly 5 digits\n  const zipRegex = /^\\d{5}$/;\n  return zipRegex.test(zip);\n};\nexport const validateBirthdate = birthdate => {\n  if (!birthdate) return false;\n  const selectedDate = new Date(birthdate);\n  const today = new Date();\n\n  // Set time to start of day for accurate comparison\n  today.setHours(0, 0, 0, 0);\n  selectedDate.setHours(0, 0, 0, 0);\n\n  // Birthdate must be in the past\n  return selectedDate < today;\n};\nexport const validatePassword = password => {\n  // At least 6 characters - TODO: Add more complexity requirements\n  return password && password.length >= 6;\n};\nexport const getValidationMessage = (field, value) => {\n  switch (field) {\n    case 'email':\n      if (!value) return 'Email is required';\n      if (!validateEmail(value)) return 'Please enter a valid email address';\n      return null;\n    case 'password':\n      if (!value) return 'Password is required';\n      if (!validatePassword(value)) return 'Password must be at least 6 characters';\n      return null;\n    case 'zip':\n      if (!value) return 'ZIP code is required';\n      if (!validateZipCode(value)) return 'ZIP code must be exactly 5 digits';\n      return null;\n    case 'birthdate':\n      if (!value) return 'Birthdate is required';\n      if (!validateBirthdate(value)) return 'Birthdate must be in the past';\n      return null;\n    default:\n      return null;\n  }\n};\n\n/**\n * Validate form data against required fields\n * @param {Object} formData - The form data to validate\n * @param {Array} requiredFields - Array of required field names\n * @returns {Object} Validation result with isValid flag and errors object\n */\nexport const validateFormData = (formData, requiredFields = []) => {\n  const errors = {};\n  requiredFields.forEach(field => {\n    const error = getValidationMessage(field, formData[field]);\n    if (error) {\n      errors[field] = error;\n    }\n  });\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["validateEmail","email","emailRegex","test","validateZipCode","zip","zipRegex","validateBirthdate","birthdate","selectedDate","Date","today","setHours","validatePassword","password","length","getValidationMessage","field","value","validateFormData","formData","requiredFields","errors","forEach","error","isValid","Object","keys"],"sources":["/Users/vamshikrishna/Desktop/1onboarding/onboarding-flow-final/frontend/src/utils/validation.js"],"sourcesContent":["// Validation utilities for the onboarding form\n// TODO: Add more validation rules later\n\nexport const validateEmail = (email) => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\nexport const validateZipCode = (zip) => {\n  // Must be exactly 5 digits\n  const zipRegex = /^\\d{5}$/;\n  return zipRegex.test(zip);\n};\n\nexport const validateBirthdate = (birthdate) => {\n  if (!birthdate) return false;\n  \n  const selectedDate = new Date(birthdate);\n  const today = new Date();\n  \n  // Set time to start of day for accurate comparison\n  today.setHours(0, 0, 0, 0);\n  selectedDate.setHours(0, 0, 0, 0);\n  \n  // Birthdate must be in the past\n  return selectedDate < today;\n};\n\nexport const validatePassword = (password) => {\n  // At least 6 characters - TODO: Add more complexity requirements\n  return password && password.length >= 6;\n};\n\nexport const getValidationMessage = (field, value) => {\n  switch (field) {\n    case 'email':\n      if (!value) return 'Email is required';\n      if (!validateEmail(value)) return 'Please enter a valid email address';\n      return null;\n    \n    case 'password':\n      if (!value) return 'Password is required';\n      if (!validatePassword(value)) return 'Password must be at least 6 characters';\n      return null;\n    \n    case 'zip':\n      if (!value) return 'ZIP code is required';\n      if (!validateZipCode(value)) return 'ZIP code must be exactly 5 digits';\n      return null;\n    \n    case 'birthdate':\n      if (!value) return 'Birthdate is required';\n      if (!validateBirthdate(value)) return 'Birthdate must be in the past';\n      return null;\n    \n    default:\n      return null;\n  }\n};\n\n/**\n * Validate form data against required fields\n * @param {Object} formData - The form data to validate\n * @param {Array} requiredFields - Array of required field names\n * @returns {Object} Validation result with isValid flag and errors object\n */\nexport const validateFormData = (formData, requiredFields = []) => {\n  const errors = {};\n  \n  requiredFields.forEach(field => {\n    const error = getValidationMessage(field, formData[field]);\n    if (error) {\n      errors[field] = error;\n    }\n  });\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n"],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,aAAa,GAAIC,KAAK,IAAK;EACtC,MAAMC,UAAU,GAAG,4BAA4B;EAC/C,OAAOA,UAAU,CAACC,IAAI,CAACF,KAAK,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMG,eAAe,GAAIC,GAAG,IAAK;EACtC;EACA,MAAMC,QAAQ,GAAG,SAAS;EAC1B,OAAOA,QAAQ,CAACH,IAAI,CAACE,GAAG,CAAC;AAC3B,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAIC,SAAS,IAAK;EAC9C,IAAI,CAACA,SAAS,EAAE,OAAO,KAAK;EAE5B,MAAMC,YAAY,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;EACxC,MAAMG,KAAK,GAAG,IAAID,IAAI,CAAC,CAAC;;EAExB;EACAC,KAAK,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1BH,YAAY,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAEjC;EACA,OAAOH,YAAY,GAAGE,KAAK;AAC7B,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C;EACA,OAAOA,QAAQ,IAAIA,QAAQ,CAACC,MAAM,IAAI,CAAC;AACzC,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EACpD,QAAQD,KAAK;IACX,KAAK,OAAO;MACV,IAAI,CAACC,KAAK,EAAE,OAAO,mBAAmB;MACtC,IAAI,CAAClB,aAAa,CAACkB,KAAK,CAAC,EAAE,OAAO,oCAAoC;MACtE,OAAO,IAAI;IAEb,KAAK,UAAU;MACb,IAAI,CAACA,KAAK,EAAE,OAAO,sBAAsB;MACzC,IAAI,CAACL,gBAAgB,CAACK,KAAK,CAAC,EAAE,OAAO,wCAAwC;MAC7E,OAAO,IAAI;IAEb,KAAK,KAAK;MACR,IAAI,CAACA,KAAK,EAAE,OAAO,sBAAsB;MACzC,IAAI,CAACd,eAAe,CAACc,KAAK,CAAC,EAAE,OAAO,mCAAmC;MACvE,OAAO,IAAI;IAEb,KAAK,WAAW;MACd,IAAI,CAACA,KAAK,EAAE,OAAO,uBAAuB;MAC1C,IAAI,CAACX,iBAAiB,CAACW,KAAK,CAAC,EAAE,OAAO,+BAA+B;MACrE,OAAO,IAAI;IAEb;MACE,OAAO,IAAI;EACf;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,QAAQ,EAAEC,cAAc,GAAG,EAAE,KAAK;EACjE,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjBD,cAAc,CAACE,OAAO,CAACN,KAAK,IAAI;IAC9B,MAAMO,KAAK,GAAGR,oBAAoB,CAACC,KAAK,EAAEG,QAAQ,CAACH,KAAK,CAAC,CAAC;IAC1D,IAAIO,KAAK,EAAE;MACTF,MAAM,CAACL,KAAK,CAAC,GAAGO,KAAK;IACvB;EACF,CAAC,CAAC;EAEF,OAAO;IACLC,OAAO,EAAEC,MAAM,CAACC,IAAI,CAACL,MAAM,CAAC,CAACP,MAAM,KAAK,CAAC;IACzCO;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}